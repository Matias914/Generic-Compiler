## ------------------------------------------------ ##
##            Programa de Ejemplo Válido            ##
## ------------------------------------------------ ##

PROGRAMA {
    ## Declaraciones ##
    uint X1;
    uint Y1, Z1, W1;
    float PROGRAMA.X2, Y2;
    uint PROGRAMA.Y3;

    uint Y(cr uint A, cr uint B, uint C) {
        uint D;
        if (A > B)
            return (trunc(PROGRAMA.X1));
        endif;
        return (Y(A + 1UI->A, B->B, 0UI->C));

        uint H1(cr uint B, uint C) {
            uint X4;
            return (0UI);
        };
        uint H2(cr uint A) {
            return (1UI);
        };
    };

    Y((uint E) { if (E > PROGRMA.X1) return (Y.D); endif; return (0.1); } (trunc(-2.1))->A, 1UI->B, 2UI->C);

    ## Asignaciones ##
    Y2 := 25UI;
    Y3 := trunc(Y2);
    X2 := Y2 + Y(X1->A, X2->B, Y1->C) * X2;

    ## Asignaciones Mútliples ##
    Y1, Y2, Y3 = 1UI, trunc(-1.13452345F+12), 5UI, 1UI;
    Y1, Y2, Y3 = 1UI, 2UI, 3UI, 4UI;
    Y1, Y2, Y3 = 1UI, 2UI, 3UI;

    ## Iteraciones ##
    do {
        X1 := Y2;
        Y2 := Y(trunc(Y2 - -2.1)->A, Y2->B, Y2->C);
        Y3 := Y(X1->A, Y.D->B, -2.1->C);
    } while (X1 =! Y1);

    ## Función Lambda ##
    (uint E) { if (E > PROGRMA.X1) return (Y.D); endif; return (0.1); } (trunc(-2.1));
    (uint E) {
        if (E > PROGRAMA.X1 + Y1 / Y(PROGRAMA.X1->A, PROGRAMA.X2->B, PROGRAMA.Y2->C))
            return (Y.D);
        endif;
        return (E);
    } (X1);

    ## If-Else Statement ##
    if (X1 =! trunc(-0.6))
        Y1 := trunc(2.54 * -2.3 + 2UI);
    else
        X1 := Y1;
    endif;

    ## print Statement ##
    print("Este es un String Literal de muchos caracteres");
    print("Dios, espero que ande el build...");
    print((uint F) { return (1UI); } (X1) - (uint F) { return (2UI); } (X1));

    ## Miscelánea ##

    uint PROGRAMA . Y . D;

    MASLARGAQUELAFILADELSUPERMERCADOCUANDOESTASAPURADO := 2UI;

    if (X1 =! Y(X1->A, X2->B, Y2->C)) {
        X1 := 2UI * 2UI;
    } else {
        print("N/A");
    }
    endif;

    ## Expresiones ##

    X1 := trunc(X1-2UI);
    X1 := X1 - Y(X1->A, X2->B, Y2->C);
    X1 := 2UI / 3UI - 2UI;
    X1 := 0.0 * 0UI / 0.0F+38 ;
    X1 := 0.0 * 2UI * (uint X) { return (X); } (X1) / 65535UI;
    X1 := 0.0 - -2.1 - - 3. + .2;
    X1 := trunc(A * B);
    X1 := - 2.1 - 2.1 - 2.1;
}

PROGRAM {

}